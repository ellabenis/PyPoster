version: '3.9'  # Set the version of the Docker Compose file

services:  # Define the services that will be running
  db:  # First service is named 'db'
    build: ./db  # Build the service from the Dockerfile in the 'db' directory
    volumes:  # Mount the volumes for the service
      - ./db-data:/data/db  # Map the local 'db-data' directory to the '/data/db' directory in the container
    environment:  # Set environment variables for the service
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}  # Set the MongoDB root username from the .env file
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}  # Set the MongoDB root password from the .env file
    ports:  # Expose the ports for the service
      - "27017:27017"  # Map local port 27017 to the container's port 27017

  app:  # Second service is named 'app'
    build: ./app  # Build the service from the Dockerfile in the 'app' directory
    environment:  # Set environment variables for the service
      FLASK_APP: app.py  # Set the entry point for Flask to 'app.py'
      FLASK_ENV: ${FLASK_ENV}  # Set the Flask environment from the .env file
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@db:27017/my-mongo-db?authSource=admin  # Set the MongoDB URI for the Flask app
      API_KEY: ${API_KEY}  # Set the API key for the Flask app
    ports:  # Expose the ports for the service
      - "5000:5000"  # Map local port 5000 to the container's port 5000
    depends_on:  # Set dependencies for the service
      - db  # The 'app' service depends on the 'db' service
